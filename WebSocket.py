import time
import cv2
import os
from pygrabber.dshow_graph import FilterGraph
import obsws_python as obs
from datetime import datetime


class Camera:
    def __init__(self):
        self.cl = None
        self.flag = False
        self.record_flag = False
        self.stop_cam_all_rec = False
        self.password_value = ""
        self.camera_ultra_name = ""

    def password(self, pwd):
        self.password_value = pwd

    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ OBS WebSocket (v5.0+)"""
        try:
            self.cl = obs.ReqClient(host="localhost", port=4455, password=self.password_value, timeout=3)
            self.flag = False
            self.record_flag = False
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ OBS —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ OBS: {e}")

    def get_camera_ids(self):
        """–ü–æ–ª—É—á–∞–µ–º ID —Å—Ü–µ–Ω –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏–∑ OBS"""
        try:
            response = self.cl.get_scene_item_list(scene_name="MainCam")
            ids = {}
            for item in response.scene_items:
                if item['sourceName'] in ['Main', 'Back']:
                    ids[item['sourceName']] = item['sceneItemId']
            return ids
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è ID –∫–∞–º–µ—Ä: {e}")
            return {}

    def record_cycle(self, duration=10):
        """–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –∑–∞–ø–∏—Å—å OBS –∫–∞–∂–¥—ã–µ duration —Å–µ–∫—É–Ω–¥"""
        if not self.cl:
            print("‚ùå OBS –Ω–µ –ø–æ–¥–∫–ª—é—á—ë–Ω")
            return

        try:
            self.record_flag = True
            while self.record_flag:
                print("‚ñ∂ –ù–∞—á–∞–ª–æ –∑–∞–ø–∏—Å–∏...")
                self.cl.start_record()
                time.sleep(duration)
                self.cl.stop_record()
                print("üíæ –ó–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–æ–≤—ã–π —Ü–∏–∫–ª —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥—ã...")
                time.sleep(2)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏: {e}")

    def Start(self, value=5, value1=5):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –º–µ–∂–¥—É –∫–∞–º–µ—Ä–∞–º–∏"""
        ids = self.get_camera_ids()
        id_main = ids.get("Main")
        id_back = ids.get("Back")

        if id_main is None or id_back is None:
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–∞–º–µ—Ä—ã 'Main' –∏ 'Back' –≤ —Å—Ü–µ–Ω–µ MainCam")
            return

        self.flag = True
        try:
            while self.flag:
                time.sleep(value)
                self.cl.set_scene_item_enabled(scene_name="MainCam", scene_item_id=id_main, scene_item_enabled=False)
                self.cl.set_scene_item_enabled(scene_name="MainCam", scene_item_id=id_back, scene_item_enabled=True)
                print("üîÅ –ö–∞–º–µ—Ä–∞ 2 –≤–∫–ª—é—á–µ–Ω–∞, –∫–∞–º–µ—Ä–∞ 1 –≤—ã–∫–ª—é—á–µ–Ω–∞.")

                time.sleep(value1)
                self.cl.set_scene_item_enabled(scene_name="MainCam", scene_item_id=id_main, scene_item_enabled=True)
                self.cl.set_scene_item_enabled(scene_name="MainCam", scene_item_id=id_back, scene_item_enabled=False)
                print("üîÅ –ö–∞–º–µ—Ä–∞ 1 –≤–∫–ª—é—á–µ–Ω–∞, –∫–∞–º–µ—Ä–∞ 2 –≤—ã–∫–ª—é—á–µ–Ω–∞.")
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–º–µ—Ä: {e}")

    def start_all(self):
        CAMERA_NAME = self.camera_ultra_name
        OUTPUT_FOLDER = "recordings"
        DURATION = 300
        FPS = 30
        self.stop_cam_all_rec = False
        os.makedirs(OUTPUT_FOLDER, exist_ok=True)

        def get_camera_index(name):
            graph = FilterGraph()
            for i, dev_name in enumerate(graph.get_input_devices()):
                if name.lower() in dev_name.lower():
                    return i
            return None

        camera_index = get_camera_index(CAMERA_NAME)
        if camera_index is None:
            print(f"‚ùå –ö–∞–º–µ—Ä–∞ '{CAMERA_NAME}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            return
        else:
            print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –Ω–∞–π–¥–µ–Ω–∞, –∏–Ω–¥–µ–∫—Å: {camera_index}")

        cap = cv2.VideoCapture(camera_index, cv2.CAP_DSHOW)
        if not cap.isOpened():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É")
            return

        # –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –∫–∞–¥—Ä–∞
        width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
        height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
        print(f"üìè –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ –∫–∞–º–µ—Ä—ã: {width}x{height}")

        try:
            while not self.stop_cam_all_rec:
                now = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
                output_file = os.path.join(OUTPUT_FOLDER, f"record_{now}.avi")
                fourcc = cv2.VideoWriter_fourcc(*"MJPG")  # –±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π –∫–æ–¥–µ–∫
                out = cv2.VideoWriter(output_file, fourcc, FPS, (width, height))

                start_time = time.time()
                print(f"‚ñ∂ –ù–∞—á–∞—Ç–∞ –∑–∞–ø–∏—Å—å —Ñ–∞–π–ª–∞ {output_file}")

                while time.time() - start_time < DURATION and not self.stop_cam_all_rec:
                    ret, frame = cap.read()
                    if not ret:
                        print("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–∞–¥—Ä")
                        continue
                    out.write(frame)
                    cv2.imshow("Recording...", frame)
                    if cv2.waitKey(1) & 0xFF == 27:
                        self.stop_cam_all_rec = True
                        break

                out.release()
                print(f"üíæ –§–∞–π–ª {output_file} –∑–∞–≤–µ—Ä—à—ë–Ω")

        finally:
            cap.release()
            cv2.destroyAllWindows()
            print("‚úÖ –ö–∞–º–µ—Ä–∞ –∑–∞–∫—Ä—ã—Ç–∞, –∑–∞–ø–∏—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
